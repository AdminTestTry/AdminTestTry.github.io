<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My Room 技能或是情感都需要一段文字来记述。</title>
  <subtitle>MyRoom —— 技能或是情感都需要一段文字来记述。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://AdminTestTry.github.io/"/>
  <updated>2018-09-18T01:30:50.446Z</updated>
  <id>http://AdminTestTry.github.io/</id>
  
  <author>
    <name>The Star</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP知识点总结</title>
    <link href="http://AdminTestTry.github.io/2018/09/18/PHP%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://AdminTestTry.github.io/2018/09/18/PHP知识点总结/</id>
    <published>2018-09-18T01:30:38.000Z</published>
    <updated>2018-09-18T01:30:50.446Z</updated>
    
    <content type="html"><![CDATA[<h3 id="哈哈"><a href="#哈哈" class="headerlink" title="哈哈"></a>哈哈</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;哈哈&quot;&gt;&lt;a href=&quot;#哈哈&quot; class=&quot;headerlink&quot; title=&quot;哈哈&quot;&gt;&lt;/a&gt;哈哈&lt;/h3&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>知識點總結（一）</title>
    <link href="http://AdminTestTry.github.io/2018/09/18/%E7%9F%A5%E8%AD%98%E9%BB%9E%E7%B8%BD%E7%B5%90%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://AdminTestTry.github.io/2018/09/18/知識點總結（一）/</id>
    <published>2018-09-18T01:27:01.000Z</published>
    <updated>2018-09-18T07:42:14.765Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PHP之十六个魔术方法详细介绍"><a href="#PHP之十六个魔术方法详细介绍" class="headerlink" title="PHP之十六个魔术方法详细介绍"></a>PHP之十六个魔术方法详细介绍</h3><ul>
<li>__construct()，类的构造函数<blockquote>
<p>php中构造方法是对象创建完成后第一个被对象自动调用的方法。在每个类中都有一个构造方法，如果没有显示地声明它，那么类中都会默认存在一个没有参数且内容为空的构造方法。<br>① 构造方法的作用<br>通常构造方法被用来执行一些有用的初始化任务，如对成员属性在创建对象时赋予初始值。</p>
<a id="more"></a>
<p>② 构造方法在类中的声明格式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function __construct([参数列表])&#123;</div><div class="line">	方法体 // 通常用来对成员属性进行初始化赋值</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<blockquote>
<p>③ 类中声明构造方法需要注意的事项<br>a) 在同一个类中只能声明一个构造方法，原因是，PHP不支持构造函数重载。<br>b) 构造方法名称是以两个下划线开始的__contruct()。<br><br></p>
<ul>
<li>__destruct()，类的析构函数<br>析构方法允许在销毁一个类之前执行的一些操作或完成一些功能，比如关闭文件、释放结果集等。（析构方法是PHP5才引入的新内容）<br><br></li>
<li><strong>call()，在对象中调用一个不可访问方法时调用<br>该方法有两个参数，第一个参数$function_name 会自动接收不存在的方法名，第二个$arguments 则以数组的方式接收不存在方法的多个参数。<br>①</strong>call()方法的格式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function __call(string $function_name, array $arguments)&#123;</div><div class="line">	// 方法体</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>②<strong>call()方法的作用<br>为了避免当调用的方法不存在时产生错误，而意外的导致程序终止，可以使用</strong>call()方法来避免。<br>该方法在调用的方法不存在时会自动调用，程序仍会继续执行下去。<br>请参考如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">class Person</div><div class="line">&#123;</div><div class="line">	function say()</div><div class="line">	&#123;</div><div class="line">		echo &quot;Hello,word!&lt;br /&gt;&quot;;</div><div class="line">	&#125;</div><div class="line">	/**</div><div class="line">	* 声明此方法用来处理调用对象中不存在的方法</div><div class="line">	*/</div><div class="line">	function __call($funName, $arguments)</div><div class="line">	&#123;</div><div class="line">		echo &quot;你所调用的函数：&quot; . $funName . &quot;(参数：&quot;; // 输出调用不存在的方法名</div><div class="line">		print_r($arguments); // 输出调用不存在的方法是的参数列表</div><div class="line">		echo &quot;)不存在！&lt;br /&gt;&quot;; // 结束换行</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">$person = new Person();</div><div class="line">$person-&gt;run(&quot;teacher&quot;);</div><div class="line">$person-&gt;eat(&quot;小明&quot;,&quot;苹果&quot;);</div><div class="line">$person-&gt;say();</div></pre></td></tr></table></figure></p>
<p>运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">你所调用的方法：run(参数：Array ( [0] =&gt; teacher ) )不存在！</div><div class="line">你所调用的方法：eat(参数：Array ( [0] =&gt; 小明 [1] =&gt; 苹果 ) )不存在！</div><div class="line">&gt;Hello, world!</div></pre></td></tr></table></figure></p>
</blockquote>
<p><br></p>
<ul>
<li>__callStatic()，用静态方式调用一个不可访问方法时调用<br><br></li>
<li>__get()，获得一个类的成员变量时调用<blockquote>
<p>在PHP面向对象编程中，类的成员属性被设定为private后，如果我们试图在外面调用它则会出现“不能访问某个似有属性”的错误。那么为了解决这个问题，我们可以使用魔术方法<strong>get()。<br>魔术方法</strong>get()的作用<br>在程序运行过程中，通过它可以在对象的外部获取私有成员属性的值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">class Person</div><div class="line">&#123;</div><div class="line">	private $name;</div><div class="line">	private $age;</div><div class="line">	function __construct($name=&quot;&quot;, $age=1)</div><div class="line">	&#123;</div><div class="line">		$this-&gt;name = $name;</div><div class="line">		$this-&gt;age = $age;</div><div class="line">	&#125;</div><div class="line">	/**</div><div class="line">	* 在类中添加__get()方法，在直接获取属性值时自动调用一次，以属性名作为参数传入并处理</div><div class="line">	* @param $propertyName</div><div class="line">	* @return int</div><div class="line">	*/</div><div class="line">	public function __get($propertyName)</div><div class="line">	&#123;  </div><div class="line">	    if ($propertyName == &quot;age&quot;) &#123;</div><div class="line">			if ($this-&gt;age &gt; 30)</div><div class="line">			&#123;</div><div class="line">				return $this-&gt;age - 10;</div><div class="line">			&#125;</div><div class="line">			else</div><div class="line">			&#123;</div><div class="line">				return $this-&gt;$propertyName;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		else</div><div class="line">		&#123;</div><div class="line">			return $this-&gt;$propertyName;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">$Person = new Person(&quot;小明&quot;, 60);  // 通过Person类实例化的对象，并通过构造方法为属性赋初值</div><div class="line">echo &quot;姓名：&quot; . $Person-&gt;name . &quot;&lt;br&gt;&quot;;  // 直接访问私有属性name，自动调用了__get()方法可以间接获取</div><div class="line">echo &quot;年龄：&quot; . $Person-&gt;age . &quot;&lt;br&gt;&quot;;  // 自动调用了__get()方法，根据对象本身的情况会返回不同的值</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<blockquote>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">姓名：小明</div><div class="line">年龄：50</div></pre></td></tr></table></figure></p>
</blockquote>
<p><br></p>
<ul>
<li>__set()，设置一个类的成员变量时调用<blockquote>
<p><strong>set() 的作用：
</strong>set( $property, $value )` 方法用来设置私有属性， 给一个未定义的属性赋值时，此方法会被触发，传递的参数是被设置的属性名和值。<br><br></p>
</blockquote>
</li>
<li>__isset()，当对不可访问属性调用isset()或empty()时调用<blockquote>
<p>在看这个方法之前我们看一下isset()函数的应用，isset()是测定变量是否设定用的函数，传入一个变量作为参数，如果传入的变量存在则传回true，否则传回false。<br>那么如果在一个对象外面使用isset()这个函数去测定对象里面的成员是否被设定可不可以用它呢？<br>分两种情况，如果对象里面成员是公有的，我们就可以使用这个函数来测定成员属性，如果是私有的成员属性，这个函数就不起作用了，原因就是因为私有的被封装了，在外部不可见。那么我们就不可以在对象的外部使用isset()函数来测定私有成员属性是否被设定了呢？当然是可以的，但不是一成不变。你只要在类里面加上一个<strong>isset()方法就可以了，当在类外部使用isset()函数来测定对象里面的私有成员是否被设定时，就会自动调用类里面的</strong>isset()方法了帮我们完成这样的操作。<br><strong>isset()的作用：当对不可访问属性调用 isset() 或 empty() 时，</strong>isset() 会被调用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">   * @param $content</div><div class="line">   *</div><div class="line">   * @return bool</div><div class="line">   */</div><div class="line">  public function __isset($content) &#123;</div><div class="line">    echo &quot;当在类外部使用isset()函数测定私有成员&#123;$content&#125;时，自动调用&lt;br&gt;&quot;;</div><div class="line">    echo isset($this-&gt;$content);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<p><br></p>
<ul>
<li>__unset()，当对不可访问属性调用unset()时被调用<blockquote>
<p>看这个方法之前呢，我们也先来看一下 unset() 函数，unset()这个函数的作用是删除指定的变量且传回true，参数为要删除的变量。<br>那么如果在一个对象外部去删除对象内部的成员属性用unset()函数可以吗？<br>这里自然也是分两种情况：<br>① 如果一个对象里面的成员属性是公有的，就可以使用这个函数在对象外面删除对象的公有属性。<br>② 如果对象的成员属性是私有的，我使用这个函数就没有权限去删除。<br>虽然有以上两种情况，但我想说的是同样如果你在一个对象里面加上<strong>unset()这个方法，就可以在对象的外部去删除对象的私有成员属性了。在对象里面加上了</strong>unset()这个方法之后，在对象外部使用“unset()”函数删除对象内部的私有成员属性时，对象会自动调用__unset()函数来帮我们删除对象内部的私有成员属性。<br><br></p>
</blockquote>
</li>
<li>__sleep()，执行serialize()时，先会调用这个函数<br>当序列化对象时，PHP 将试图在序列动作之前调用该对象的成员函数 “_sleep()”。这样就允许对象在被序列化之前做任何清除操作。<br><br></li>
<li><strong>wakeup()，执行unserialize()时，先会调用这个函数<br>类似的，当使用 unserialize() 恢复对象时， 将调用 “</strong>wakeup()” 成员函数。<br><br></li>
<li>__toString()，类被当成字符串时的回应方法<blockquote>
<p>作用：<br><strong>toString() 方法用于一个类被当成字符串时应怎样回应。例如 <code>echo $obj;</code> 应该显示些什么。<br>注意：<br>此方法必须返回一个字符串，否则将发出一条 <code>E_RECOVERABLE_ERROR</code> 级别的致命错误。<br>警告：<br>不能在 </strong>toString() 方法中抛出异常。这么做会导致致命错误。<br><br></p>
</blockquote>
</li>
<li>__invoke()，调用函数的方式调用一个对象时的回应方法（该特性只在PHP 5.3.0及以上版本有效）<br><br></li>
<li>__set_state()，调用var_export()导出类时，此静态方法会被调用（该特性只在PHP 5.1.0及以上版本有效）<br><br></li>
<li>__clone()，当对象复制完成时调用<br><br></li>
<li>__autoload()，尝试加载未定义的类<blockquote>
<p>作用：<br>你可以通过定义这个函数来启用类的自动加载。<br>在魔术函数 <strong>autoload() 方法出现以前，如果你要在一个程序文件中实例化100个对象，那么你必须用include或者require包含进来100个类文件，或者你把这100个类定义在同一个类文件中 —— 相信这个文件一定会非常大，然后你就痛苦了。<br>但是有了 </strong>autoload() 方法，以后就不必为此大伤脑筋了，这个类会在你实例化对象之前自动加载制定的文件。<br>还是通过例子来看看吧：<br>先看看以往的方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">/** </div><div class="line"> * 文件non_autoload.php </div><div class="line"> */</div><div class="line">require_once(&apos;project/class/A.php&apos;); </div><div class="line">require_once(&apos;project/class/B.php&apos;); </div><div class="line">require_once(&apos;project/class/C.php&apos;); </div><div class="line">   </div><div class="line">if (条件A) &#123; </div><div class="line">  $a = new A(); </div><div class="line">  $b = new B(); </div><div class="line">  $c = new C(); </div><div class="line">  // … 业务逻辑 </div><div class="line">&#125; else if (条件B) &#123; </div><div class="line">  $a = newA(); </div><div class="line">  $b = new B(); </div><div class="line">  // … 业务逻辑 </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<blockquote>
<p>看到了吗？不用100个，只是3个看起来就有点烦了。而且这样就会有一个问题：如果脚本执行“条件B”这个分支时，C.php这个文件其实没有必要包含。因为，任何一个被包含的文件，无论是否使用，均会被php引擎编译。如果不使用，却被编译，这样可以被视作一种资源浪费。更进一步，如果C.php包含了D.php，D.php包含了E.php。并且大部分情况都执行“条件B”分支，那么就会浪费一部分资源去编译C.php,D.php,E.php三个“无用”的文件。<br>那么如果使用 __autoload() 方式呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">/** </div><div class="line"> * 文件autoload_demo.php </div><div class="line"> */</div><div class="line">function __autoload($className) &#123; </div><div class="line">  $filePath = “project/class/&#123;$className&#125;.php”; </div><div class="line">  if (is_readable($filePath)) &#123; </div><div class="line">    require($filePath); </div><div class="line">  &#125; </div><div class="line">&#125; </div><div class="line">   </div><div class="line">if (条件A) &#123; </div><div class="line">  $a = new A(); </div><div class="line">  $b = new B(); </div><div class="line">  $c = new C(); </div><div class="line">  // … 业务逻辑 </div><div class="line">&#125; else if (条件B) &#123; </div><div class="line">  $a = newA(); </div><div class="line">  $b = new B(); </div><div class="line">  // … 业务逻辑 </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ok,不论效率怎么用，最起码界面看起来舒服多了，没有太多冗余的代。<br>再来看看这里的效率如何，我们分析下：<br>当php引擎第一次使用类A，但是找不到时，会自动调用 <strong>autoload 方法，并将类名“A”作为参数传入。所以，我们在 </strong>autoload() 中需要的做的就是根据类名，找到相应的文件，并包含进来，如果我们的方法也找不到，那么php引擎就会报错了。<br>注意：<br>这里可以只用require，因为一旦包含进来后，php引擎再遇到类A时，将不会调用<strong>autoload，而是直接使用内存中的类A，不会导致多次包含。<br>扩展：<br>其实php发展到今天，已经有将 <code>spl_autoload_register</code> — 注册给定的函数作为 </strong>autoload 的实现了，但是这个不在啊本文讲解之内，有兴趣可以自行看手册。<br><br></p>
<ul>
<li>__debugInfo()，打印所需调试信息（该方法在PHP 5.6.0及其以上版本才可以用，如果你发现使用无效或者报错，请查看你的版本。）<br><br><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><br><br>以上就是PHP中我了解到的魔术方法了，常用的包括 <strong>set() </strong>get() __autoload() 等应该熟悉，其他的了解也没有关系，毕竟知识不怕多嘛。</li>
</ul>
<p>好了，有兴趣的或者我这里没有说明白的，可以参考啊官方文档。</p>
<p>PHP在线手册地址：<a href="http://php.net/manual/zh/" target="_blank" rel="external">http://php.net/manual/zh/</a></p>
<p>以上就是本文的全部内容，希望对大家的学习有所帮助。</p>
</blockquote>
<hr>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://www.jb51.net/article/96167.htm" target="_blank" rel="external">脚本之家</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;PHP之十六个魔术方法详细介绍&quot;&gt;&lt;a href=&quot;#PHP之十六个魔术方法详细介绍&quot; class=&quot;headerlink&quot; title=&quot;PHP之十六个魔术方法详细介绍&quot;&gt;&lt;/a&gt;PHP之十六个魔术方法详细介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;__construct()，类的构造函数&lt;blockquote&gt;
&lt;p&gt;php中构造方法是对象创建完成后第一个被对象自动调用的方法。在每个类中都有一个构造方法，如果没有显示地声明它，那么类中都会默认存在一个没有参数且内容为空的构造方法。&lt;br&gt;① 构造方法的作用&lt;br&gt;通常构造方法被用来执行一些有用的初始化任务，如对成员属性在创建对象时赋予初始值。&lt;/p&gt;
    
    </summary>
    
      <category term="技术人生" scheme="http://AdminTestTry.github.io/categories/%E6%8A%80%E6%9C%AF%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="php" scheme="http://AdminTestTry.github.io/tags/php/"/>
    
      <category term="知识总结" scheme="http://AdminTestTry.github.io/tags/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    
      <category term="魔术方法" scheme="http://AdminTestTry.github.io/tags/%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>查找的博客文章</title>
    <link href="http://AdminTestTry.github.io/2017/02/07/%E6%9F%A5%E6%89%BE%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <id>http://AdminTestTry.github.io/2017/02/07/查找的博客文章/</id>
    <published>2017-02-07T01:33:55.939Z</published>
    <updated>2017-02-10T01:32:52.990Z</updated>
    
    <content type="html"><![CDATA[<h3 id="php"><a href="#php" class="headerlink" title="php"></a>php</h3><blockquote>
<p>浅谈php脚本，原始出处：<a href="http://rainbird.blog.51cto.com/211214/272550/" target="_blank" rel="external">http://rainbird.blog.51cto.com/211214/272550/</a> 作者：51CTO博主 rainbird2<br>如何在CentOS配置Apache的HTTPS服务，原始出处<a href="http://www.4byte.cn/learning/120027/ru-he-zai-centos-pei-zhi-apache-de-https-fu-wu.html" target="_blank" rel="external">http://www.4byte.cn/learning/120027/ru-he-zai-centos-pei-zhi-apache-de-https-fu-wu.html</a> 出处：字节技术<br><a id="more"></a></p>
<h3 id="LAMP"><a href="#LAMP" class="headerlink" title="LAMP"></a>LAMP</h3><p>CentOS 6.5使用yum快速搭建LAMP环境，原始出处：<a href="http://www.linuxidc.com/Linux/2014-07/104563.htm" target="_blank" rel="external">http://www.linuxidc.com/Linux/2014-07/104563.htm</a> 来源：Linux社区<br>作者：skypegnu<br>LAMP（Apache）环境部署安装SSL安全证书且可HTTPS加密网站，原始链接：<a href="http://www.myhack58.com/Article/sort099/sort0102/2015/60882.htm" target="_blank" rel="external">http://www.myhack58.com/Article/sort099/sort0102/2015/60882.htm</a><br>LAMP（Apache）环境部署安装SSL安全证书且可HTTPS加密网站，原始链接：<a href="http://www.laozuo.org/5628.html" target="_blank" rel="external">http://www.laozuo.org/5628.html</a><br>在CentOS配置Apache的HTTPS服务，原始链接：<a href="http://blog.csdn.net/wlzx120/article/details/52597338" target="_blank" rel="external">http://blog.csdn.net/wlzx120/article/details/52597338</a></p>
<h3 id="注"><a href="#注" class="headerlink" title="注:"></a><font color="pink">注:</font></h3><font color="pink">记录一些比较好的博客文章，以备闲暇时候阅读</font>

</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;php&quot;&gt;&lt;a href=&quot;#php&quot; class=&quot;headerlink&quot; title=&quot;php&quot;&gt;&lt;/a&gt;php&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;浅谈php脚本，原始出处：&lt;a href=&quot;http://rainbird.blog.51cto.com/211214/272550/&quot;&gt;http://rainbird.blog.51cto.com/211214/272550/&lt;/a&gt; 作者：51CTO博主 rainbird2&lt;br&gt;如何在CentOS配置Apache的HTTPS服务，原始出处&lt;a href=&quot;http://www.4byte.cn/learning/120027/ru-he-zai-centos-pei-zhi-apache-de-https-fu-wu.html&quot;&gt;http://www.4byte.cn/learning/120027/ru-he-zai-centos-pei-zhi-apache-de-https-fu-wu.html&lt;/a&gt; 出处：字节技术&lt;br&gt;
    
    </summary>
    
      <category term="技术人生" scheme="http://AdminTestTry.github.io/categories/%E6%8A%80%E6%9C%AF%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="php" scheme="http://AdminTestTry.github.io/tags/php/"/>
    
      <category term="blog" scheme="http://AdminTestTry.github.io/tags/blog/"/>
    
      <category term="linux" scheme="http://AdminTestTry.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux服务器环境配置，phpStudy for Linux (lnmp+lamp一键安装包)</title>
    <link href="http://AdminTestTry.github.io/2017/02/06/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%EF%BC%8CphpStudy-for-Linux-lnmp-lamp%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E5%8C%85/"/>
    <id>http://AdminTestTry.github.io/2017/02/06/Linux服务器环境配置，phpStudy-for-Linux-lnmp-lamp一键安装包/</id>
    <published>2017-02-06T07:36:14.028Z</published>
    <updated>2017-02-06T08:04:53.679Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h3><blockquote>
<p>项目地址：<a href="http://lamp.phpstudy.net/" target="_blank" rel="external">http://lamp.phpstudy.net/</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget -c http://lamp.phpstudy.net/phpstudy.bin </div><div class="line">chmod +x phpstudy.bin    #权限设置</div><div class="line">./phpstudy.bin 　　　　   #运行安装（需要root权限）</div></pre></td></tr></table></figure></p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>选择自己想要的php的版本安装即可。<br>用时十到几十分钟不等，安装时间取决于电脑的下载速度和配置。</p>
</blockquote>
<h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><blockquote>
<p>服务进程管理：phpstudy (start|stop|restart|uninstall)<br>站点主机管理：phpstudy (add|del|list)<br>ftpd用户管理：phpstudy ftp (add|del|list)</p>
</blockquote>
<h3 id="添加新的站点步骤"><a href="#添加新的站点步骤" class="headerlink" title="添加新的站点步骤:"></a>添加新的站点步骤:</h3><blockquote>
<p>第一步：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#   phpstudy add</div></pre></td></tr></table></figure></p>
<p>根据提示，填写想设置的域名。出现成功的提示信息，会给出 <strong>站点根目录</strong> 的路径；</p>
<p>第二步：在所对应的站点文件夹中创建一个文件（index.php），用来测试是否配置成功；</p>
<p>第三步：配置hosts文件，linux系统中的hosts文件目录一般为：/etc/hosts;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#   vim /etc/hosts</div></pre></td></tr></table></figure></p>
<p>然后编辑hosts文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#   127.0.0.1    www.hello.com   #填写你刚设置的域名</div></pre></td></tr></table></figure></p>
<p>第四步：重启服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#   phpstudy restart</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="如何切换php版："><a href="#如何切换php版：" class="headerlink" title="如何切换php版："></a>如何切换php版：</h3><blockquote>
<p>假如你先安装的apache+php5.3<br>想切换成nginx+php5.4<br>你就再走一次./phpstudy.bin<br>但是你会发现有一行是否安装mysql提示选不安装<br>这样只需要编译nginx+php5.4<br>从而节省时间，这样只需要几分钟即可。</p>
</blockquote>
<h3 id="注"><a href="#注" class="headerlink" title="注:"></a><font color="pink">注:</font></h3><font color="pink">2017年2月6日 15:18:50：熟悉linux服务器环境配置</font>

]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装说明&quot;&gt;&lt;a href=&quot;#安装说明&quot; class=&quot;headerlink&quot; title=&quot;安装说明&quot;&gt;&lt;/a&gt;安装说明&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;http://lamp.phpstudy.net/&quot;&gt;http://lamp.phpstudy.net/&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;wget -c http://lamp.phpstudy.net/phpstudy.bin &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;chmod +x phpstudy.bin    #权限设置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;./phpstudy.bin 　　　　   #运行安装（需要root权限）&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术人生" scheme="http://AdminTestTry.github.io/categories/%E6%8A%80%E6%9C%AF%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="Linux" scheme="http://AdminTestTry.github.io/tags/Linux/"/>
    
      <category term="phpstudy" scheme="http://AdminTestTry.github.io/tags/phpstudy/"/>
    
      <category term="centos" scheme="http://AdminTestTry.github.io/tags/centos/"/>
    
      <category term="lamp" scheme="http://AdminTestTry.github.io/tags/lamp/"/>
    
      <category term="lnmp" scheme="http://AdminTestTry.github.io/tags/lnmp/"/>
    
  </entry>
  
  <entry>
    <title>Linux（CentOS）下搭建hexo</title>
    <link href="http://AdminTestTry.github.io/2017/01/22/Linux%EF%BC%88CentOS%EF%BC%89%E4%B8%8B%E6%90%AD%E5%BB%BAhexo/"/>
    <id>http://AdminTestTry.github.io/2017/01/22/Linux（CentOS）下搭建hexo/</id>
    <published>2017-01-22T01:30:00.000Z</published>
    <updated>2017-01-23T02:46:28.495Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h3><blockquote>
<p>1、下载源码，你需要在<a href="https://nodejs.org/en/download/下载最新的Nodejs版本，本文以v0.10.24为例（再linux终端输入命令即可）---" target="_blank" rel="external">https://nodejs.org/en/download/下载最新的Nodejs版本，本文以v0.10.24为例（再linux终端输入命令即可）---</a> 来源（<a href="http://www.linuxidc.com/Linux/2016-12/138501.htm" target="_blank" rel="external">Linux公社</a>）<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/src/</div><div class="line">wget http://nodejs.org/dist/v0.10.24/node-v0.10.24.tar.gz</div></pre></td></tr></table></figure></p>
<p>2、解压源码</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar zxvf node-v0.10.24.tar.gz</div></pre></td></tr></table></figure>
<blockquote>
<p>3、 编译安装</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd node-v0.10.24</div><div class="line">./configure --prefix=/usr/local/node/0.10.24</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
<blockquote>
<p>4、 配置NODE_HOME，进入profile编辑环境变量</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/profile</div></pre></td></tr></table></figure>
<blockquote>
<p>设置nodejs环境变量，在 export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL 一行的上面添加如下内容:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#set for nodejs</div><div class="line">export NODE_HOME=/usr/local/node/0.10.24</div><div class="line">export PATH=$NODE_HOME/bin:$PATH</div></pre></td></tr></table></figure>
<blockquote>
<p>:wq保存并退出，编译/etc/profile 使配置生效</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /etc/profile</div></pre></td></tr></table></figure>
<blockquote>
<p>验证是否安装配置成功</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node -v</div></pre></td></tr></table></figure>
<blockquote>
<p>输出 v0.10.24 表示配置成功</p>
<p>npm模块安装路径       /usr/local/node/0.10.24/lib/node_modules/</p>
<p>###安装git<br>安装git工具，继续敲以下命令（来源：<a href="http://www.cnblogs.com/zhangchenliang/p/3954286.html" target="_blank" rel="external">博客园</a>）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install git</div></pre></td></tr></table></figure>
<blockquote>
<p>敲下命令，过了几分钟提示</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Setting up Install Process</div><div class="line"></div><div class="line">No package git available.</div><div class="line"></div><div class="line">Nothing to do</div></pre></td></tr></table></figure>
<blockquote>
<p>查了下资料，运行如下命令</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -Uvh http://dl.fedoraproject.org/pub/epel/5/i386/epel-release-5-4.noarch.rpm</div></pre></td></tr></table></figure>
<blockquote>
<p>随后 yum install git 后安装成功</p>
<p>Linux CentOS 5.x 32位适合上面的方式，其他系统版本的参考下面：</p>
<p>CentOS 5.x 64-bit(x64):</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -Uvh http://dl.fedoraproject.org/pub/epel/5/x86_64/epel-release-5-4.noarch.rpm</div></pre></td></tr></table></figure>
<blockquote>
<p>CentOS 6.x32-bit (x86/i386):</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -Uvh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-5.noarch.rpm</div></pre></td></tr></table></figure>
<blockquote>
<p>CentOS 6.x 64-bit(x64):</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -Uvh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-5.noarch.rpm</div></pre></td></tr></table></figure>
<blockquote>
<p>自己对linux还不是很熟悉，要学习的东西还挺多的</p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>1、部署 Hexo — 安装</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo</div></pre></td></tr></table></figure>
<blockquote>
<p>2、部署 Hexo — 初始化<br>再服务器根目录中，创建一个目录，或者直接放在服务器根目录中</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /www</div></pre></td></tr></table></figure>
<p>或：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir /www/blog</div><div class="line">cd /www/blog/</div></pre></td></tr></table></figure>
<blockquote>
<p>以后者为例</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init /www/blog</div></pre></td></tr></table></figure>
<p>#暂时结束</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装node&quot;&gt;&lt;a href=&quot;#安装node&quot; class=&quot;headerlink&quot; title=&quot;安装node&quot;&gt;&lt;/a&gt;安装node&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1、下载源码，你需要在&lt;a href=&quot;https://nodejs.org/en/download/下载最新的Nodejs版本，本文以v0.10.24为例（再linux终端输入命令即可）---&quot;&gt;https://nodejs.org/en/download/下载最新的Nodejs版本，本文以v0.10.24为例（再linux终端输入命令即可）---&lt;/a&gt; 来源（&lt;a href=&quot;http://www.linuxidc.com/Linux/2016-12/138501.htm&quot;&gt;Linux公社&lt;/a&gt;）&lt;br&gt;
    
    </summary>
    
      <category term="技术人生" scheme="http://AdminTestTry.github.io/categories/%E6%8A%80%E6%9C%AF%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="Hexo" scheme="http://AdminTestTry.github.io/tags/Hexo/"/>
    
      <category term="MarkDown" scheme="http://AdminTestTry.github.io/tags/MarkDown/"/>
    
      <category term="博客" scheme="http://AdminTestTry.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo在本地搭建个人博客（Windows）</title>
    <link href="http://AdminTestTry.github.io/2017/01/22/%E4%BD%BF%E7%94%A8Hexo%E5%9C%A8%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88Windows%EF%BC%89/"/>
    <id>http://AdminTestTry.github.io/2017/01/22/使用Hexo在本地搭建个人博客（Windows）/</id>
    <published>2017-01-22T01:30:00.000Z</published>
    <updated>2017-01-24T01:58:37.427Z</updated>
    
    <content type="html"><![CDATA[<p>最近工作上不算太忙，加上初交女友，有些欣喜若狂，想在互联网中找到属于自己的一方土地。百般搜索，巧遇hexo这款博客框架，于是有心尝试。我看了多个人的博客，以下内容多数是借鉴他人的。另外本人对着这方面算是小白，对gitHub等也是知之甚少，第一次搭建，第一次写文章也算是给博客充充场子。<br>初步搭建这个博客，可谓是历尽折磨，似懂非懂。不过我将过程列出，希望别人能够更顺利的搭建出自己的博客。<br><a id="more"></a></p>
<h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><h3 id="①-安装node"><a href="#①-安装node" class="headerlink" title="① 安装node"></a>① 安装node</h3><p>到<a href="http://moxfive.xyz/" target="_blank" rel="external">Node.js</a>官网下载相应平台的最新版本，一路安装即可。但是我看到有些博客说建议安装过node之后重启电脑，后面使用命令安装hexo的时候，会提示命令无效。我却没有遇到这样的问题，各位视情况而定吧。</p>
<h3 id="②-安装git"><a href="#②-安装git" class="headerlink" title="② 安装git"></a>② 安装git</h3><p>作用：把本地的hexo内容提交到github上去。</p>
<h3 id="③-申请gitHub"><a href="#③-申请gitHub" class="headerlink" title="③ 申请gitHub"></a>③ 申请gitHub</h3><p>作用：是用来做博客的远程创库、域名、服务器之类的。github账号没有的话直接申请就行了，跟一般的注册账号差不多。</p>
<h3 id="④-安装Hexo"><a href="#④-安装Hexo" class="headerlink" title="④ 安装Hexo"></a>④ 安装Hexo</h3><p> WIN+R输入cmd，进入命令行模式。使用以下命令安装hexo（ps：以下命令中的<em>$</em>符号只为了让教程和实际看起来一致，实际输入命令只需输入$ 后面的命令即可）</p>
<p><strong>$ npm install hexo-cli -g</strong></p>
<p><strong>$ npm install hexo-deployer-git –save</strong></p>
<p> 接下来创建放置博客文件的文件夹，如我hexo文件夹的位置为E:\blog，名字和地方可以自由选择，当然最好不要放在中文路径下。执行以下命令，Hexo会自动在该文件夹下下载搭建网站所需的所有文件。</p>
<p><strong>$ hexo init C:\WWW\blog</strong></p>
<p> 命令行模式下，进入自己博客文件的根目录</p>
<p><strong>$ cd C:\WWW\blog</strong></p>
<p><strong>$ hexo init</strong></p>
<p>接着：</p>
<p><strong>$ npm install</strong></p>
<p><strong>$ hexo server</strong></p>
<h3 id="接下来在浏览器输入：http-localhost-4000，即可正常访问默认主题。"><a href="#接下来在浏览器输入：http-localhost-4000，即可正常访问默认主题。" class="headerlink" title="接下来在浏览器输入：http://localhost:4000，即可正常访问默认主题。"></a>接下来在浏览器输入：<a href="http://localhost:4000，即可正常访问默认主题。" target="_blank" rel="external">http://localhost:4000，即可正常访问默认主题。</a></h3><h3 id="如果你不满足现在的默认主题，我推荐以下几个相关链接，供大家参考"><a href="#如果你不满足现在的默认主题，我推荐以下几个相关链接，供大家参考" class="headerlink" title="如果你不满足现在的默认主题，我推荐以下几个相关链接，供大家参考"></a>如果你不满足现在的默认主题，我推荐以下几个相关链接，供大家参考</h3><p><a href="http://moxfive.xyz/" target="_blank" rel="external">MOxFIVE</a> <a href="http://moxfive.coding.me/yelee/2.Basic-Usage/post-excerpt.html" target="_blank" rel="external">Yelee主题详细介绍</a></p>
<hr>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://hexo.io/zh-cn/api/tag.html" target="_blank" rel="external">Hexo官网</a><br><a href="http://luckykun.com/work/2016-04-23/heoll-hexo.html" target="_blank" rel="external">LuckyKun</a><br><a href="http://cnodejs.org/topic/5700997a93a6967159553b91" target="_blank" rel="external">http://cnodejs.org/topic/5700997a93a6967159553b91</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近工作上不算太忙，加上初交女友，有些欣喜若狂，想在互联网中找到属于自己的一方土地。百般搜索，巧遇hexo这款博客框架，于是有心尝试。我看了多个人的博客，以下内容多数是借鉴他人的。另外本人对着这方面算是小白，对gitHub等也是知之甚少，第一次搭建，第一次写文章也算是给博客充充场子。&lt;br&gt;初步搭建这个博客，可谓是历尽折磨，似懂非懂。不过我将过程列出，希望别人能够更顺利的搭建出自己的博客。&lt;br&gt;
    
    </summary>
    
      <category term="技术人生" scheme="http://AdminTestTry.github.io/categories/%E6%8A%80%E6%9C%AF%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="Hexo" scheme="http://AdminTestTry.github.io/tags/Hexo/"/>
    
      <category term="MarkDown" scheme="http://AdminTestTry.github.io/tags/MarkDown/"/>
    
      <category term="PHP" scheme="http://AdminTestTry.github.io/tags/PHP/"/>
    
      <category term="恋爱这条路，需要坚持，包容，耐心，信心，信任，关爱" scheme="http://AdminTestTry.github.io/tags/%E6%81%8B%E7%88%B1%E8%BF%99%E6%9D%A1%E8%B7%AF%EF%BC%8C%E9%9C%80%E8%A6%81%E5%9D%9A%E6%8C%81%EF%BC%8C%E5%8C%85%E5%AE%B9%EF%BC%8C%E8%80%90%E5%BF%83%EF%BC%8C%E4%BF%A1%E5%BF%83%EF%BC%8C%E4%BF%A1%E4%BB%BB%EF%BC%8C%E5%85%B3%E7%88%B1/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://AdminTestTry.github.io/2017/01/20/hello-world/"/>
    <id>http://AdminTestTry.github.io/2017/01/20/hello-world/</id>
    <published>2017-01-20T02:30:00.000Z</published>
    <updated>2017-01-24T01:58:27.220Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
